const after = ':attr deve ser uma data depois de :arg0.';
const afterOrEqual = ':attr deve ser uma data depois ou igual a :arg0.';
const before = ':attr deve ser uma data anterior a :arg0.';
const beforeOrEqual = ':attr deve ser uma data anterior ou igual a :date.';
const boolean = ':attr deve ser boolean.';
const dateISO = ':attr deve ser uma data ISO-8601 válida.';

export const messages = {
  after,
  afterOrEqual,
  before,
  beforeOrEqual,

  accepted: ':attr deve ser aceitável.',
  acceptedIf: ':attr deve ser aceitável se o parâmetro :arg0 é :arg1.',
  acceptedNotIf: ':attr não pode ser aceitável se o parâmetro :arg0 é :arg1.',
  activeUrl: ':attr não é uma url válida.',
  alpha: ':attr pode conter apenas letras.',
  alphaDash: ':attr pode conter apenas letras e travessões.',
  alphaNumeric: ':attr pode conter apenas letras e números.',
  alphaHyphen: ':attr pode conter apenas letras e hífen (-).',
  alphaNumericDash: ':attr pode conter apenas letras, números e travessões.',
  arrayLen: ':attr deve ser uma lista no tamanho de :arg0.',
  arrayLenRange: (params: any) => {
    if (params.ruleArgs.length == 1) {
      return ':attr deve ser uma lista com o tamanho máximo de :arg0.'
    }

    return ':attr deve ser uma lista no tamanho entre :arg1 - :arg0.'
  },
  arrayLenMin: ':attr deve ser uma lista com tamanho mínimo de :arg0.',
  arrayLenMax: ':attr deve ser uma lista com tamanho máximo de :arg0.',
  array: ':attr deve ser uma lista.',
  arrayUnique: ':attr deve ser uma lista de valores únicos.',
  arrayUniqueObjects: ':attr deve ser uma lista de :args único no objeto.',
  ascii: ':attr pode conter apenas caractéres ascii válidos.',
  base64: ':attr precisa ser um texto base64 válido.',
  between: ':attr precisa ser entre :arg0 e :arg1',
  boolean,
  booleanStrict: boolean,
  booleanStr: boolean,
  booleanInt: boolean,
  confirmed: ':attr de confirmação não está igual.',
  contains: ':attr precisa conter :arg0.',
  creditCard: ':attr deve ser um número de cartão de crédito válido.',
  date: ':attr precisa ser uma data válida.',
  dateAfter: after,
  dateAfterToday: ':attr deve ser uma data depois de :arg0 :arg1.',
  dateDaysAfterToday: ':attr deve ser uma data depois de :arg0 days.',
  dateYearsAfterToday: ':attr deve ser uma data depois de :arg0 years.',
  dateDaysBeforeToday: ':attr deve ser uma data antes de :arg0 days.',
  dateYearsBeforeToday: ':attr deve ser uma data antes de :arg0 years.',
  dateBefore: before,
  dateBeforeToday: ':attr deve ser uma data antes de :arg0 :arg1.',
  dateFormat: ':attr não está de acordo com o formato :arg0.',
  datetime: ':attr deve ser um datetime(YYYY-MM-DD HH:mm:ss).',
  dateISO,
  dateiso: dateISO,
  decimal: ':attr deve ser valor decimal válido.',
  different: ':attr e :arg0 devem ser diferentes.',
  digits: ':attr deve ser de :arg0 dígitos.',
  digitsBetween: ':attr deve ser entre :arg0 e :arg1.',
  dimensions: ':attr deve atender às restrições de dimensão como :args.',
  domain: ':attr deve ser um domínio válido.',
  email: ':attr deve ser um endereço de email válido.',
  equals: ':attr deve ser igual a :arg0.',
  gt: ':attr deve ser maior que :args.',
  gte: ':attr deve ser maior ou igual a :args.',
  length: ':attr comprimento não aceitável.',
  lt: ':attr deve ser menor que :args',
  lte: ':attr deve ser menor que ou igual a :args',
  hash: ':attr deve ser um hash :arg0 válido.',
  hex: ':attr deve ser uma hex válida.',
  hexColor: ':attr deve ser um cor hexadecimal válida.',
  in: ':attr selecionado é inválido.',
  integer: ':attr deve ser um número inteiro.',
  ip: ':attr deve ser um endereço de IP válido.',
  ipv4: ':attr deve ser um endereço de IPv4 válido.',
  ipv6: ':attr deve ser um endereço de IPv6 válido.',
  iso8601: ':attr deve ser um texto ISO8601 válido.',
  json: ':attr deve ser um texto JSON válido.',
  latLong: ':attr deve ser lat e long separados por vígula e sem espaços.',
  lengthBetween: ':attr comprimento deve ser entre :arg0 - :arg1.',
  macAddress: ':attr deve ser um endereço mac válido.',
  max: ':attr não pode ser maior que :arg0.',
  maxLength: ':attr não pode ser maior que :arg0.',
  mime: ':attr deve ser um arquivo do tipo: :args.',
  min: ':attr deve ser pelo menos :arg0.',
  minLength: ':attr não pode ser menor que :arg0.',
  mongoId: ':attr deve ser um id mongo válido.',
  notContains: ':attr não pode conter :arg0.',
  notIn: ':attr é inválido.',
  nullable: ':attr é obrigatório.',
  numeric: ':attr deve ser um número.',
  object: ':attr deve ser um objeto.',
  phoneNumber: ':attr deve ser um número de telefone válido.',
  regex: ':attr está com o formato inválido.',
  required: 'Campo :attr é obrigatório.',
  requiredIf: ':attr é obrigatório.',
  requiredNotIf: 'Campo :attr é obrigatório.',
  requiredWith: 'Campo :attr é obrigatório.',
  requiredWithout: 'Campo :attr é obrigatório.',
  requiredWithoutAll: 'Campo :attr é obrigatório.',
  same: ':attr e :arg0 precisam combinar.',
  size: ':attr deve ter o o tamanho de :arg0.',
  sometimes: ':attr é obrigatório.',
  string: ':attr deve ser um texto.',
  timezone: ':attr deve ser uma zona válida.',
  unique: ':attr já foi encontrado, deve ser único.',
  url: ':attr etá com o formato inválido.',
  any: 'Pelos menos um dos campos :attr deve ser provido.',
  $niceNames: {},
  $custom: {
    // customAttributeName: 'Messagem vai aqui.',
    // 'customAttributeName.ruleName': 'Messagem vai aqui.',
  },
  $default: ":attr validação falhou sob a regra :rule usando o valor :value.",
};
